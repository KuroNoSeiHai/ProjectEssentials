buildscript {
    repositories {
        maven { url("https://files.minecraftforge.net/maven") }
        maven { url("https://libraries.minecraft.net") }
        maven { url("https://plugins.gradle.org/m2/") }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath(
            group: "net.minecraftforge.gradle",
            name: "ForgeGradle",
            version: forgeGradleVersion,
            changing: true
        )
        classpath(
            "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        )
    }
}

apply(plugin: "net.minecraftforge.gradle")
apply(plugin: "kotlin")
apply(plugin: "java")

version = projectEssentialsVersion
group = "com.mairwunnx.$projectEssentialsId"
archivesBaseName = projectEssentialsName

configurations {
    modClientDependencies
    modServerDependencies
    ktlint
    embed
    compile.extendsFrom(embed)
}

minecraft {
    mappings(
        channel: mappingsChannelType,
        version: mappingsChannelVersion
    )

    runs {
        client {
            workingDirectory(project.file(devRunClientPath))
            property("forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP")
            property("forge.logging.console.level", "debug")
            mods {
                ProjectEssentials {
                    source(sourceSets.main)
                }
            }
        }

        server {
            workingDirectory(project.file(devRunServerPath))
            property("forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP")
            property("forge.logging.console.level", "debug")
            mods {
                ProjectEssentials {
                    source(sourceSets.main)
                }
            }
        }
    }
}

repositories {
    jcenter()
    mavenCentral()
    maven { url("https://minecraft.curseforge.com/api/maven/") }
    maven { url("https://libraries.minecraft.net") }
}

dependencies {
    minecraft(group: "net.minecraftforge", name: "forge", version: forgeBaseVersion)
    compile(group: "com.mojang", name: "brigadier", version: brigadierBaseVersion)
    ktlint(group: "com.pinterest", name: "ktlint", version: ktlintVersion)
    compile(group: "com.uchuhimo", name: "konf", version: konfVersion)
    compile(
        group: "org.jetbrains.kotlin",
        name: "kotlin-stdlib-$kotlinJdkVersionTarget",
        version: kotlinVersion
    )
    embed(
        group: "org.jetbrains.kotlin",
        name: "kotlin-stdlib-$kotlinJdkVersionTarget",
        version: kotlinVersion
    )
}

task installMods(type: Copy) {
    dependsOn("installClientMods")
    dependsOn("installServerMods")
}

task installClientMods(type: Copy, dependsOn: "deinstallClientMods") {
    from { configurations.modClientDependencies }
    include("**/*.jar")
    into(file("$devRunClientPath/mods"))
}

task installServerMods(type: Copy, dependsOn: "deinstallServerMods") {
    from { configurations.modServerDependencies }
    include("**/*.jar")
    into(file("$devRunServerPath/mods"))
}

task deinstallClientMods(type: Delete) {
    delete(fileTree(dir: "$devRunClientPath/mods", include: "*.jar"))
}

task deinstallServerMods(type: Delete) {
    delete(fileTree(dir: "$devRunServerPath/mods", include: "*.jar"))
}

project.afterEvaluate {
    project.tasks["prepareRuns"].dependsOn(project.tasks["installClientMods"])
    project.tasks["prepareRuns"].dependsOn(project.tasks["installServerMods"])
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check kotlin sources code style"
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args("src/**/*.kt")
}

check.dependsOn(ktlint)

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations"
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args("-F", "src/**/*.kt")
}

jar.dependsOn(ktlintFormat)

jar {
    manifest {
        attributes([
            "Specification-Title"     : projectEssentialsName,
            "Specification-Vendor"    : projectEssentialsVendor,
            "Specification-Version"   : projectEssentialsVersion,
            "Implementation-Title"    : projectEssentialsName,
            "Implementation-Version"  : projectEssentialsVersion,
            "Implementation-Vendor"   : projectEssentialsVendor,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    from configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
}

sourceCompatibility = targetCompatibility =
    compileJava.sourceCompatibility =
        compileJava.targetCompatibility = jvmVersionTarget

compileKotlin.kotlinOptions.jvmTarget =
    compileTestKotlin.kotlinOptions.jvmTarget = jvmVersionTarget
